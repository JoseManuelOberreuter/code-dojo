# Test rÃ¡pido de Python #13
# -----------------------------------------------
# Â¿CuÃ¡l es el resultado de este cÃ³digo?

# CÃ³digo:
a = (1)
b = (1,)
print(type(a))
print(type(b))

# Opciones:
# A) Ambos son tuples
# B) b es int y a es tuple
# C) a es int y b es tuple




# ğŸ‘‡ğŸ‘‡ğŸ‘‡ SPOILER: no sigas bajando si no quieres ver la respuesta ğŸ‘‡ğŸ‘‡ğŸ‘‡

































































































































"""
Respuesta correcta: C) a es int y b es tuple

ExplicaciÃ³n:
En Python, los parÃ©ntesis por sÃ­ solos no definen una tupla. Lo que define una tupla es la coma.  
Esto puede resultar confuso porque visualmente `a = (1)` parece una tupla, pero en realidad no lo es.

Analicemos el cÃ³digo:

    a = (1)

AquÃ­, los parÃ©ntesis simplemente agrupan una expresiÃ³n. Python lo interpreta como:

    a = 1

Por eso, `type(a)` devuelve:

    <class 'int'>

Ahora, en:

    b = (1,)

Esa coma despuÃ©s del 1 sÃ­ le indica a Python que queremos una tupla, aunque solo tenga un elemento. AsÃ­ que:

    type(b) â†’ <class 'tuple'>

Esto se aplica incluso sin parÃ©ntesis:

    c = 1,
    type(c) â†’ <class 'tuple'>

Comparaciones Ãºtiles:

    (1)     â†’ int
    (1,)    â†’ tuple
    (1, 2)  â†’ tuple
    1,      â†’ tuple

Consejo prÃ¡ctico:
Siempre que necesites crear una tupla de un solo elemento, 
no olvides la coma. Sin ella, estarÃ¡s asignando simplemente un nÃºmero (u otro tipo de dato) y no una tupla.
"""