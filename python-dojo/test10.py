# Test rÃ¡pido de Python #10
# -----------------------------------------------
# Â¿CuÃ¡l es el resultado de este cÃ³digo?

# CÃ³digo:
print({1, 2, 3} & {2, 3, 4})

# Opciones:
# A) {1, 2, 3, 4}
# B) {2, 3}
# C) {1, 4}


# ğŸ‘‡ğŸ‘‡ğŸ‘‡ SPOILER: no sigas bajando si no quieres ver la respuesta ğŸ‘‡ğŸ‘‡ğŸ‘‡

































































































































"""
Respuesta correcta: B) {2, 3}

ExplicaciÃ³n:
Este cÃ³digo usa el operador `&` entre dos sets (conjuntos) en Python.  
El operador `&` representa la **intersecciÃ³n** entre dos conjuntos, es decir, 
devuelve un nuevo set que contiene **solo los elementos que estÃ¡n presentes en ambos**.

En este caso:

    {1, 2, 3} & {2, 3, 4}

Ambos sets tienen los elementos 2 y 3 en comÃºn. Por lo tanto, la intersecciÃ³n es:

    {2, 3}

Este tipo de operaciÃ³n es muy Ãºtil cuando necesitas encontrar coincidencias entre colecciones, listas o grupos de datos Ãºnicos.

Otras operaciones Ãºtiles entre sets:

- UniÃ³n (todos los elementos, sin repetir):

      {1, 2, 3} | {3, 4, 5}  â†’  {1, 2, 3, 4, 5}

- Diferencia (elementos que estÃ¡n en el primer set pero no en el segundo):

      {1, 2, 3} - {2, 3}     â†’  {1}

- Diferencia simÃ©trica (elementos que estÃ¡n en un set u otro, pero no en ambos):

      {1, 2, 3} ^ {2, 3, 4}  â†’  {1, 4}

Consejo prÃ¡ctico:
Los sets en Python eliminan automÃ¡ticamente los elementos duplicados, y tienen un rendimiento muy eficiente para bÃºsquedas y operaciones lÃ³gicas. Son ideales cuando necesitas trabajar con colecciones Ãºnicas y comparar contenido entre grupos.
"""