# Test rÃ¡pido de Python #2
# -----------------------------------------------
# Â¿CuÃ¡l es el resultado de este cÃ³digo?

# CÃ³digo:
x = [1, 2, 3]
y = x
y.append(4)
print(x)

# Opciones:
# A) [1, 2, 3]
# B) [1, 2, 3, 4]
# C) Error

# ğŸ‘‡ğŸ‘‡ğŸ‘‡ SPOILER: no sigas bajando si no quieres ver la respuesta ğŸ‘‡ğŸ‘‡ğŸ‘‡




































































































"""
Respuesta correcta: B) [1, 2, 3, 4]

ExplicaciÃ³n:
En Python, las listas son objetos mutables, lo que significa que pueden cambiar despuÃ©s de ser creadas.

Cuando escribes:

    y = x

no estÃ¡s creando una copia nueva de la lista, sino que estÃ¡s haciendo que **`y` apunte al mismo objeto en memoria que `x`**. Es decir, tanto `x` como `y` hacen referencia a la misma lista.

Luego, cuando haces:

    y.append(4)

estÃ¡s modificando la lista compartida por ambas variables. Por lo tanto, cuando imprimes `x`, ves el resultado:

    [1, 2, 3, 4]

âœ… Ambas variables apuntan al mismo objeto, asÃ­ que cualquier cambio que hagas a travÃ©s de `y` se verÃ¡ reflejado tambiÃ©n en `x`.

ğŸ§  Consejo prÃ¡ctico:
Si quieres hacer una copia independiente de una lista, puedes usar slicing (`[:]`) o la funciÃ³n `copy()`:

```python
x = [1, 2, 3]
y = x[:]        # Copia con slicing
# o
y = x.copy()    # Copia con mÃ©todo built-in
"""