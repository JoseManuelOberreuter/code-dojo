# Test rÃ¡pido de Python #9
# -----------------------------------------------
# Â¿CuÃ¡l es el resultado de este cÃ³digo?

# CÃ³digo:
print("".join(["a", "b", "c"]))

# Opciones:
# A) ["a", "b", "c"]
# B) "abc"
# C) "a b c"

# ðŸ‘‡ðŸ‘‡ðŸ‘‡ SPOILER: no sigas bajando si no quieres ver la respuesta ðŸ‘‡ðŸ‘‡ðŸ‘‡

































































































































"""
Respuesta correcta: B) "abc"

ExplicaciÃ³n:
El mÃ©todo `.join()` en Python se usa para unir elementos de una lista (o cualquier iterable) 
en un solo string, utilizando como separador el string que invoca el mÃ©todo.

Su sintaxis general es:

    separador.join(lista)

En este caso:

    "".join(["a", "b", "c"])

AquÃ­, el separador es un string vacÃ­o (""), lo que significa que los elementos de la lista 
se van a unir sin nada entre ellos. Por lo tanto, se forma el string:

    "abc"

Veamos algunos ejemplos adicionales para entenderlo mejor:

    "-".join(["a", "b", "c"])   â†’  "a-b-c"
    " ".join(["hola", "mundo"]) â†’ "hola mundo"
    "_".join(["1", "2", "3"])   â†’ "1_2_3"

Consejo prÃ¡ctico:

`.join()` solo funciona con elementos que ya son strings. Si intentas pasarle una lista de enteros, 
obtendrÃ¡s un error. Por ejemplo:

    "".join([1, 2, 3])  â†’ TypeError

En ese caso, debes convertir los elementos a string primero:

    "".join(str(x) for x in [1, 2, 3])  â†’ "123"

Este mÃ©todo es especialmente Ãºtil cuando necesitas transformar listas en cadenas, 
como al construir mensajes, procesar texto, o crear expresiones en formatos como CSV.
"""